<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HTCondor 대시보드 | EC2</title>
    <link rel="stylesheet" href="/css/htcondor-dashboard.css" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <div class="container">
      <header>
        <h1>HTCondor 대시보드</h1>
      </header>

      <% if (errorMessage) { %>
      <div class="error-message"><%= errorMessage %></div>
      <% } else { %>
      <!-- 클러스터 노드 상태 -->
      <section class="section">
        <h2>구성 노드 정보 상태</h2>
        <table>
          <thead>
            <tr>
              <th>Node Name</th>
              <th>OS</th>
              <th>Architecture</th>
              <th>Status</th>
              <th>Activity</th>
              <th>Load Average</th>
              <th>Memory</th>
              <th>Activity Time</th>
            </tr>
          </thead>
          <tbody>
            <% clusterNodes.forEach((node) => { %>
            <tr>
              <td><%= node.name %></td>
              <td><%= node.os %></td>
              <td><%= node.architecture %></td>
              <td><%= node.state %></td>
              <td><%= node.activity %></td>
              <td><%= node.loadAverage %></td>
              <td><%= node.memory %></td>
              <td><%= node.activityTime %></td>
            </tr>
            <% }); %>
          </tbody>
        </table>
      </section>

      <!-- 클러스터 요약 -->
      <section class="section">
        <h2>노드 요약</h2>
        <table>
          <thead>
            <tr>
              <th>Architecture</th>
              <th>Total</th>
              <th>Owner</th>
              <th>Claimed</th>
              <th>Unclaimed</th>
              <th>Matched</th>
              <th>Preempting</th>
              <th>Draining</th>
            </tr>
          </thead>
          <tbody>
            <% clusterSummary.forEach((summary) => { %>
            <tr>
              <td><%= summary.architecture %></td>
              <td><%= summary.total %></td>
              <td><%= summary.owner %></td>
              <td><%= summary.claimed %></td>
              <td><%= summary.unclaimed %></td>
              <td><%= summary.matched %></td>
              <td><%= summary.preempting %></td>
              <td><%= summary.draining %></td>
            </tr>
            <% }); %>
          </tbody>
        </table>
      </section>

      <!-- 작업 큐 상태 -->
      <section class="section">
        <h2>작업 큐 상태</h2>
        <pre><%= queue.join("\n") %></pre>
        <!-- 작업 제출 버튼 -->
        <div class="text-end mb-3">
          <button
            type="button"
            class="btn btn-primary"
            data-bs-toggle="modal"
            data-bs-target="#submitJobModal"
          >
            작업 제출
          </button>
        </div>
      </section>

      <!-- 총 작업 상태 -->
      <section class="section">
        <h2>모든 작업 상태</h2>
        <pre><%= totalStatus.join("\n") %></pre>
      </section>

      <!-- CPU 메트릭 차트 -->
      <section class="section">
        <h2>CPU 메트릭</h2>
        <canvas id="cpuMetricsChart"></canvas>
      </section>

      <!-- 작업 제출 모달 -->
      <div
        class="modal fade"
        id="submitJobModal"
        tabindex="-1"
        aria-labelledby="submitJobModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="submitJobModalLabel">작업 제출</h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body">
              <form id="submitJobForm" enctype="multipart/form-data">
                <div class="mb-3">
                  <label for="controlNodeIp" class="form-label"
                    >마스터 노드 IP:</label
                  >
                  <input
                    type="text"
                    class="form-control"
                    id="controlNodeIp"
                    name="controlNodeIp"
                    required
                  />
                </div>
                <div class="mb-3">
                  <label for="scriptFile" class="form-label"
                    >스크립트 파일 업로드:</label
                  >
                  <input
                    type="file"
                    class="form-control"
                    id="scriptFile"
                    name="scriptFile"
                    required
                  />
                </div>
                <div class="mb-3">
                  <label for="args" class="form-label">스크립트 인자:</label>
                  <input
                    type="text"
                    class="form-control"
                    id="args"
                    name="args"
                  />
                </div>
                <button
                  id="submitJobButton"
                  class="btn btn-primary"
                  type="button"
                >
                  제출
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>

      <script>
          let labels = <%- JSON.stringify(metrics[0]?.Timestamps.reverse().map(ts => new Date(ts).toLocaleTimeString()) || []); %>;
          let datasets = <%- JSON.stringify(metrics.map(metric => ({
            label: metric.Label,
            data: metric.Values.reverse(),
            backgroundColor: "rgba(75,192,192,0.2)",
            borderColor: "rgba(75,192,192,1)",
            borderWidth: 2,
            hoverBackgroundColor: "rgba(75,192,192,0.4)",
            hoverBorderColor: "rgba(75,192,192,1)",
            fill: false,
            tension: 0.1
          }))); %>;

          // 차트 구성 및 생성
          let canvas = document.getElementById('cpuMetricsChart');
          let config = {
            type: "line",
            data: {
              labels: labels,
              datasets: datasets
            },
            options: {
              responsive: true,
              plugins: {
                legend: {
                  display: true,
                  position: "top"
                }
              },
              scales: {
                y: {
                  title: {
                    display: true,
                    text: "CPU 사용률 (%)"
                  },
                  beginAtZero: true
                }
              }
            }
          };
          let cpuMetricsChart = new Chart(canvas, config);

        document.getElementById("submitJobButton").addEventListener("click", async (e) => {
          e.preventDefault();

          const form = document.getElementById("submitJobForm");
          const formData = new FormData(form);

          try {
            const response = await axios.post("/ec2/htcondor/submit-job", formData, {
              headers: { "Content-Type": "multipart/form-data" },
            });

            if (response.status === 201) {
              alert("작업이 성공적으로 제출되었습니다!");
              location.reload();
            }
          } catch (error) {
            console.error("작업 제출 중 오류 발생:", error);
            alert("작업 제출 중 오류가 발생했습니다.");
          }
        });
      </script>
      <% } %>
    </div>
  </body>
</html>
